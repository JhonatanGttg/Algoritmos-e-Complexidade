{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JhonatanGttg/Algoritmos-e-Complexidade/blob/main/BooksToScrape\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nN65thulzzwP"
      },
      "source": [
        "EQUIPE - JHONATAN INACIO DA SILVA / LUCAS GABRIEL H TEXEIRA / EMANUELLY CLARISSA DE SOUZA SILVA / HERBERT RICHARD OLIVEIRA DA SILVA"
      ],
      "id": "nN65thulzzwP"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dM6w93bszzwS"
      },
      "outputs": [],
      "source": [
        "# %pip install beautifulsoup4 requests pandas\n",
        "from pathlib import Path\n",
        "from urllib.parse import urljoin\n",
        "import re\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "\n",
        "BASE_URL = 'https://books.toscrape.com/'\n",
        "OUTPUT_DIR = Path('../data')\n",
        "CSV_ALL = OUTPUT_DIR / 'books_all_pages.csv'\n"
      ],
      "id": "dM6w93bszzwS"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NJi0B4TxzzwU"
      },
      "outputs": [],
      "source": [
        "def fetch(url: str) -> str:\n",
        "    resp = requests.get(url, timeout=20)\n",
        "    resp.raise_for_status()\n",
        "    return resp.text\n",
        "\n",
        "def rating_from_classes(el) -> int:\n",
        "    if not el:\n",
        "        return 0\n",
        "    classes = el.get('class', [])\n",
        "    mapping = {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5}\n",
        "    for name, val in mapping.items():\n",
        "        if name in classes:\n",
        "            return val\n",
        "    return 0\n",
        "\n",
        "def extract_category(book_page_html: str) -> str:\n",
        "    soup = BeautifulSoup(book_page_html, 'html.parser')\n",
        "    li_items = soup.select('ul.breadcrumb li')\n",
        "    if len(li_items) >= 3:\n",
        "        return li_items[2].get_text(strip=True)\n",
        "    a_items = soup.select('ul.breadcrumb li a')\n",
        "    if len(a_items) >= 2:\n",
        "        return a_items[-1].get_text(strip=True)\n",
        "    return ''\n",
        "\n",
        "def normalize_price(text: str) -> str:\n",
        "    # Extrai número com 2 casas e usa ponto como separador decimal\n",
        "    m = re.search(r'(\\d+[\\.,]\\d{2})', text)\n",
        "    if m:\n",
        "        return m.group(1).replace(',', '.')\n",
        "    cleaned = re.sub(r'[^0-9\\.]', '', text)\n",
        "    return cleaned\n",
        "\n",
        "def parse_listing(html: str, current_url: str):\n",
        "    soup = BeautifulSoup(html, 'html.parser')\n",
        "    rows = []\n",
        "    for article in soup.select('article.product_pod'):\n",
        "        a = article.select_one('h3 a')\n",
        "        title = a['title'].strip() if a and a.has_attr('title') else (a.get_text(strip=True) if a else '')\n",
        "        href = a.get('href') if a else None\n",
        "        book_url = urljoin(current_url, href) if href else ''\n",
        "\n",
        "        price_el = article.select_one('p.price_color')\n",
        "        price_text = price_el.get_text(strip=True) if price_el else ''\n",
        "        price = normalize_price(price_text)\n",
        "\n",
        "        avail_el = article.select_one('p.instock.availability')\n",
        "        availability = avail_el.get_text(strip=True) if avail_el else ''\n",
        "        rating_el = article.select_one('p.star-rating')\n",
        "        rating = rating_from_classes(rating_el)\n",
        "\n",
        "        category = ''\n",
        "        if book_url:\n",
        "            try:\n",
        "                detail_html = fetch(book_url)\n",
        "                category = extract_category(detail_html)\n",
        "            except Exception:\n",
        "                category = ''\n",
        "\n",
        "        rows.append({'title': title, 'price': price, 'availability': availability, 'category': category, 'rating': rating})\n",
        "    return rows\n",
        "\n",
        "def next_page_url(current_url: str, html: str) -> str:\n",
        "    soup = BeautifulSoup(html, 'html.parser')\n",
        "    a = soup.select_one('li.next > a')\n",
        "    if not a or not a.get('href'):\n",
        "        return ''\n",
        "    return urljoin(current_url, a['href'])\n"
      ],
      "id": "NJi0B4TxzzwU"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c6GIRMvGzzwU",
        "outputId": "7ff53115-312b-416b-9af3-68875d973e56"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1000"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "# Percorre todas as páginas e coleta\n",
        "all_rows = []\n",
        "url = BASE_URL\n",
        "while url:\n",
        "    html = fetch(url)\n",
        "    rows = parse_listing(html, url)\n",
        "    all_rows.extend(rows)\n",
        "    url = next_page_url(url, html)\n",
        "len(all_rows)\n"
      ],
      "id": "c6GIRMvGzzwU"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "qJsql7gdzzwV",
        "outputId": "071bada1-d868-4018-d981-3380dfeb8da6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                                   title  price availability  \\\n",
              "0                   A Light in the Attic  51.77     In stock   \n",
              "1                     Tipping the Velvet  53.74     In stock   \n",
              "2                             Soumission  50.10     In stock   \n",
              "3                          Sharp Objects  47.82     In stock   \n",
              "4  Sapiens: A Brief History of Humankind  54.23     In stock   \n",
              "\n",
              "             category  rating  \n",
              "0              Poetry       3  \n",
              "1  Historical Fiction       1  \n",
              "2             Fiction       1  \n",
              "3             Mystery       4  \n",
              "4             History       5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd89a5ff-f4d8-4c3f-adc0-d0d604f1e063\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>price</th>\n",
              "      <th>availability</th>\n",
              "      <th>category</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A Light in the Attic</td>\n",
              "      <td>51.77</td>\n",
              "      <td>In stock</td>\n",
              "      <td>Poetry</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Tipping the Velvet</td>\n",
              "      <td>53.74</td>\n",
              "      <td>In stock</td>\n",
              "      <td>Historical Fiction</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Soumission</td>\n",
              "      <td>50.10</td>\n",
              "      <td>In stock</td>\n",
              "      <td>Fiction</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Sharp Objects</td>\n",
              "      <td>47.82</td>\n",
              "      <td>In stock</td>\n",
              "      <td>Mystery</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Sapiens: A Brief History of Humankind</td>\n",
              "      <td>54.23</td>\n",
              "      <td>In stock</td>\n",
              "      <td>History</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd89a5ff-f4d8-4c3f-adc0-d0d604f1e063')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd89a5ff-f4d8-4c3f-adc0-d0d604f1e063 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd89a5ff-f4d8-4c3f-adc0-d0d604f1e063');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-92877711-0f2a-452a-9896-dac93ac9ced7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-92877711-0f2a-452a-9896-dac93ac9ced7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-92877711-0f2a-452a-9896-dac93ac9ced7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"print(f'Salvo em: {CSV_ALL}')\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Tipping the Velvet\",\n          \"Sapiens: A Brief History of Humankind\",\n          \"Soumission\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"53.74\",\n          \"54.23\",\n          \"50.10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"availability\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"In stock\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Historical Fiction\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total de livros: 1000\n",
            "Salvo em: ../data/books_all_pages.csv\n"
          ]
        }
      ],
      "source": [
        "# Visualiza e salva\n",
        "df = pd.DataFrame(all_rows)\n",
        "display(df.head())\n",
        "OUTPUT_DIR.mkdir(parents=True, exist_ok=True)\n",
        "df.to_csv(CSV_ALL, index=False, encoding='utf-8')\n",
        "print(f'Total de livros: {len(df)}')\n",
        "print(f'Salvo em: {CSV_ALL}')\n"
      ],
      "id": "qJsql7gdzzwV"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}